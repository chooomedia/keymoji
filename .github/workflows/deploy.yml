name: Build and Deploy via FTP

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: production
      NODE_VERSION: '20'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    # Clean npm cache und node_modules
    - name: Clean npm cache and modules
      run: |
        npm cache clean --force
        rm -rf node_modules
        rm -f package-lock.json

    # Installiere global benötigte Pakete
    - name: Install global packages
      run: |
        npm install -g webpack
        npm install -g webpack-cli

    # Installiere Projekt-Abhängigkeiten
    - name: Install project dependencies
      run: |
        npm install webpack webpack-cli webpack-merge webpack-dev-server --save-dev
        npm install
        npm ls webpack webpack-cli webpack-merge webpack-dev-server

    - name: Generate updated time
      run: |
        echo "export const updatedTime = '$(date -u +"%Y-%m-%dT%H:%M:%SZ")';" > ./src/updatedTime.js

    # Build mit detaillierter Fehlerausgabe
    - name: Build
      run: |
        echo "Starting build process..."
        echo "NODE_ENV: $NODE_ENV"
        echo "Webpack version: $(npm list webpack)"
        echo "Webpack-cli version: $(npm list webpack-cli)"
        echo "Webpack-merge version: $(npm list webpack-merge)"
        NODE_ENV=production npx webpack --config webpack/build.js --display-error-details
      env:
        NODE_ENV: production
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        API_URL: ${{ secrets.API_URL }}

    # Validiere den Build
    - name: Validate build
      run: |
        if [ ! -d "build" ]; then
          echo "Build directory is missing!"
          exit 1
        fi
        echo "Build directory contents:"
        ls -la build/

    # Deploy nur wenn Build erfolgreich
    - name: Deploy via FTP
      if: success()
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        server-dir: ${{ secrets.SERVERDIR }}
        local-dir: ./build/
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/*.map
          **/.DS_Store
        log-level: verbose
        dangerous-clean-slate: false

    # Cleanup
    - name: Cleanup
      if: always()
      run: |
        rm -rf build
        rm -f .env