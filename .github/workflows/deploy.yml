name: Build and Deploy via FTP

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: production
      NODE_VERSION: '20'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    # Erstelle package-lock.json neu
    - name: Create fresh package-lock.json
      run: |
        rm -f package-lock.json
        rm -rf node_modules

    # Installiere die AbhÃ¤ngigkeiten
    - name: Install Dependencies
      run: |
        npm install --save-dev \
          webpack@5.88.2 \
          webpack-cli@5.1.4 \
          webpack-merge@5.7.3 \
          webpack-dev-server@4.15.1 \
          @babel/core@7.14.3 \
          @babel/preset-env@7.14.2 \
          babel-loader@8.2.2 \
          css-loader@5.2.6 \
          style-loader@2.0.0 \
          postcss-loader@5.3.0 \
          mini-css-extract-plugin@1.6.0 \
          autoprefixer@10.2.5 \
          tailwindcss@2.2.19 \
          clean-webpack-plugin@3.0.0 \
          html-webpack-plugin@5.3.1 \
          svelte-loader@3.1.9 \
          svelte@3.59.2
      
    - name: Verify installations
      run: |
        echo "Node version: $(node -v)"
        echo "NPM version: $(npm -v)"
        echo "Webpack version: $(npx webpack -v)"
        npm list webpack webpack-cli webpack-merge webpack-dev-server

    - name: Generate updated time
      run: |
        echo "export const updatedTime = '$(date -u +"%Y-%m-%dT%H:%M:%SZ")';" > ./src/updatedTime.js

    # Build mit npx
    - name: Build
      run: |
        echo "Starting build process..."
        npx webpack --config webpack/build.js --mode production
      env:
        NODE_ENV: production
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        API_URL: ${{ secrets.API_URL }}

    - name: Validate build
      run: |
        if [ ! -d "build" ]; then
          echo "Build directory is missing!"
          exit 1
        fi
        echo "Build directory contents:"
        ls -la build/

    - name: Deploy via FTP
      if: success()
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        server-dir: ${{ secrets.SERVERDIR }}
        local-dir: ./build/
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/*.map
          **/.DS_Store
        log-level: verbose
        dangerous-clean-slate: false

    - name: Cleanup
      if: always()
      run: |
        rm -rf build
        rm -f .env